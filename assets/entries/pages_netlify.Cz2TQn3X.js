import{j as e,o as r,i}from"../chunks/chunk-QQHFLgus.js";import{S as n,a as l,b as s}from"../chunks/chunk-DkvPIy2k.js";import{L as d}from"../chunks/chunk-DJTIoNMK.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import"../chunks/chunk-7E_FEcaS.js";/* empty css                      */const p=[];function a(t){const o={a:"a",blockquote:"blockquote",p:"p",...t.components};return e.jsxs(e.Fragment,{children:[e.jsx(n,{staticHostLink:e.jsxs(e.Fragment,{children:[", such as ",e.jsx(o.a,{href:"https://www.netlify.com/",children:"Netlify"})]})}),`
`,e.jsxs(o.blockquote,{children:[`
`,e.jsxs(o.p,{children:["For deploying SSR, see ",e.jsx(d,{href:"/netlify-functions"}),"."]}),`
`]}),`
`,e.jsx(l,{}),`
`,e.jsx(s,{})]})}function u(t={}){const{wrapper:o}=t.components||{};return o?e.jsx(o,{...t,children:e.jsx(a,{...t})}):a(t)}const c=Object.freeze(Object.defineProperty({__proto__:null,default:u,pageSectionsExport:p},Symbol.toStringTag,{value:"Module"})),z={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:r}},NavHeader:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/+NavHeader.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:i}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/netlify/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:c}}};export{z as configValuesSerialized};
